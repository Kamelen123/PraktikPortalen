// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PraktikPortalen.Infrastructure.Data;

#nullable disable

namespace PraktikPortalen.Migrations
{
    [DbContext(typeof(PraktikportalenDbContext))]
    partial class PraktikportalenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Energy"
                        });
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Göteborg",
                            IsActive = true,
                            Name = "TechCorp",
                            Website = "https://techcorp.com"
                        },
                        new
                        {
                            Id = 2,
                            City = "Stockholm",
                            IsActive = true,
                            Name = "GreenEnergy",
                            Website = "https://greenenergy.com"
                        });
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.Internship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsOpen", "ApplicationDeadline");

                    b.ToTable("Internships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationDeadline = new DateTime(2025, 10, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            CategoryId = 1,
                            City = "Göteborg",
                            CompanyId = 1,
                            Description = "Work on APIs",
                            IsOpen = true,
                            LocationType = 2,
                            Title = "Backend Developer Intern"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationDeadline = new DateTime(2025, 9, 25, 12, 0, 0, 0, DateTimeKind.Utc),
                            CategoryId = 2,
                            City = "Stockholm",
                            CompanyId = 2,
                            Description = "Research renewable energy",
                            IsOpen = true,
                            LocationType = 1,
                            Title = "Energy Analyst Intern"
                        });
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.InternshipApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("CoverLetter")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CvUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("InternshipId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("InternshipId", "ApplicantId")
                        .IsUnique();

                    b.ToTable("InternshipApplications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = 2,
                            CoverLetter = "Excited to join",
                            CvUrl = "cv_member1.pdf",
                            InternshipId = 1,
                            Status = 1,
                            SubmittedAt = new DateTime(2025, 9, 10, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            ApplicantId = 3,
                            CoverLetter = "Passionate about energy",
                            CvUrl = "cv_member2.pdf",
                            InternshipId = 2,
                            Status = 1,
                            SubmittedAt = new DateTime(2025, 9, 10, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@test.com",
                            FullName = "Admin User",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEHfdPaPu3AoXt73wEtI9kk74dORAiPsgVJVbKJDfU6UNi2wjuO11LCYGHrCwUxlthQ==",
                            Role = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "member1@test.com",
                            FullName = "Member One",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEJHOQD8WJ9FhT7jFt5WPjdw+iA6FmLgQSsWA+9ranctpdC3Xy2v4vtign4B+sADe+g==",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "member2@test.com",
                            FullName = "Member Two",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEJHOQD8WJ9FhT7jFt5WPjdw+iA6FmLgQSsWA+9ranctpdC3Xy2v4vtign4B+sADe+g==",
                            Role = 1
                        });
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.Internship", b =>
                {
                    b.HasOne("PraktikPortalen.Domain.Entities.Category", "Category")
                        .WithMany("Internships")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PraktikPortalen.Domain.Entities.Company", "Company")
                        .WithMany("Internships")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.InternshipApplication", b =>
                {
                    b.HasOne("PraktikPortalen.Domain.Entities.User", "Applicant")
                        .WithMany("InternshipApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PraktikPortalen.Domain.Entities.Internship", "Internship")
                        .WithMany("InternshipApplications")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.Category", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.Company", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.Internship", b =>
                {
                    b.Navigation("InternshipApplications");
                });

            modelBuilder.Entity("PraktikPortalen.Domain.Entities.User", b =>
                {
                    b.Navigation("InternshipApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
